#Read the mySQL table summary results for power analysis and print contents of the .CSV file summary to the console
#CalPlug MISER - State Summarizer for determining energy use baseline baselines
#California Plug Load Research Center, 2018
#Developed by M. Klopfer Aug 30, 2018 - V1
#Ver 2.3, 2/5/19


#Note: This tool provides a summary in "pseudo-CSV" format in the output console to the summary table generated by statescripttotals.py.  Run on data generated by this script contained in it's output SQL table.
#For use, find and update the table reference (there are a number of them!)to point to a different dataset.


#Library setup:
import sys
from datetime import timedelta, datetime, date, time
from time import mktime
import mysql.connector

#Operational Constants/Parameters - changing these updates the calculations this script provides to the output window from the factors provided from the input
#Computer load in off, Standby, On (Active/Idle)
CompLoadParamsOff = [0.1, 0.5, 1.5] #min/mid/max values to test
CompLoadParamsStby = [1.0, 2.5, 5.0]
CompLoadParamsOn = [20, 30, 40, 45, 50, 60, 80, 100, 120, 150]
#Note for reference: 100% use at 120W is 1051.2KWh/year!

#values to use for the summary evaluation report
#all possible values shown:
#Unit_values = ["TotalStyMinAllDay", "EstMinPerDay", "State%PerDay"]
#State_vals = ["On","Sleep","Off","Active", "Idle", "UserUnknown", "CPUUnknown"]  #more to add, finish this off

Unit_values = ["EstMinPerDay", "State%PerDay"]
State_vals = ["On","Sleep","Off","Idle","Active","UserUnknown","CPUUnknown"]  #more to add, finish this off

#Global Variables
energyaccumulator = [[0,0,0], [0,0,0], [0,0,0]] #Stores the off, standby, active values in simulation operation for weekdays, week end days, and all days



#Functions
def query_updatevalue(dictionaryname, key_to_find, definition):  #used to update a sample SQL query with a new value - easier than parsing strings manually
    #remember, if a key is missed, this will skip, be careful!!
    for index, key in enumerate(dictionaryname.keys()):
        if(len(key_to_find) == len(definition)): #check same number of entries to valid process
            if (index<len(key_to_find)):  #prevent an out of range error if not all key vaues are replaced (for some reason)
                if key == key_to_find[index]: #fix the index versus element issue with start as 0 vs 1
                    dictionaryname[key] = definition[index]
                    #print (index)  #--Debug printout
                    #print (key)    #--Debug printout
    return [dictionaryname] #returns as array, you only need/want the first [0] element, make sure this is called on the function return!



#************************************************
#Program Operation

if __name__=="__main__":
    #Open Database connection
    db = mysql.connector.connect(host="XXXXXX.calit2.uci.edu",    # host
                         user="XXXXXXX",         # username
                         passwd="XXXXXXXX",  # password
                         db="XXXXXXXXX")        # DBName

    cursor = db.cursor() # Cursor object for database query

    #Queries against the resultssummary DB
    #Returns the average for all days
    query_1 = ("SELECT "
        # Standard Deviation of Each Individual Weekday
        "(SELECT AVG(`Monday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)),"
        "(SELECT AVG(`Tuesday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT AVG(`Wednesday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT AVG(`Thursday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT AVG(`Friday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        
        # Standard Deviation of Weekdays Combined
        "(SELECT "
        "    AVG(t) "
        "FROM"
            "(SELECT (`Monday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Tuesday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Wednesday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Thursday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Friday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)) "
        "AS data), "
    
        # Standard Deviation of Each Individual Weekend
        "(SELECT AVG(`Saturday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT AVG(`Sunday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        
        # Standard Deviation of Weekend Combined
        "(SELECT AVG(g) "
        "FROM "
            "(SELECT (`Saturday`) AS g FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Sunday`) AS g FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)) "
        "AS data2), "
    
        # Standard Deviation of Entire Week Combined
        "(SELECT AVG(f) "
        "FROM "
            "(SELECT (`Monday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Tuesday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Wednesday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Thursday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Friday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Saturday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Sunday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)) "
        "AS data3) ")

    #Returns the STDEV for all days (verify proper operation)
    query_2 = ("SELECT "
        # Standard Deviation of Each Individual Weekday
        "(SELECT STDDEV(`Monday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)),"
        "(SELECT STDDEV(`Tuesday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT STDDEV(`Wednesday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT STDDEV(`Thursday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT STDDEV(`Friday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        
        # Standard Deviation of Weekdays Combined
        "(SELECT "
        "    STDDEV(t) "
        "FROM"
            "(SELECT (`Monday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Tuesday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Wednesday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Thursday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Friday`) AS t FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)) "
        "AS data), "
    
        # Standard Deviation of Each Individual Weekend
        "(SELECT STDDEV(`Saturday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        "(SELECT STDDEV(`Sunday`) FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)), "
        
        # Standard Deviation of Weekend Combined
        "(SELECT STDDEV(g) "
        "FROM "
            "(SELECT (`Saturday`) AS g FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Sunday`) AS g FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)) "
        "AS data2), "
    
        # Standard Deviation of Entire Week Combined
        "(SELECT STDDEV(f) "
        "FROM "
            "(SELECT (`Monday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Tuesday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Wednesday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Thursday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Friday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Saturday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s) "
            "UNION ALL "
            "SELECT (`Sunday`) AS f FROM statesummaryALL WHERE (`Unit` = %(Unit_values)s AND `State` = %(State_values)s)) "
        "AS data3) ")

    #Default Query for replacing elements of return with dictionary - change subject number to view other subjects
    query_modifications = {'Unit_values': "EstMinPerDay",'State_values': "On"} #query records default case




    #Print CSV Headers:
    #print("MonIdle,Computer Power (delta W),Intervention Setting (min),Idle Percent,Per Day Energy Usage (kWh) [Weekday Only],Total Weekday Contribution (kWh),Weekday Contribution Std. Dev (kWh),Weekend Contribution  (kWh),Weekday Contribution Std. Dev (kWh), Total Savings(kWh)")

    #Page thru parameters to extract summary for and print into a CSV style format in the console

    #*********Test for different loads
    print("State Duration Info:")
    print("average-weekdays,average-weekends,average-alldays;STDEV-weekdays,STDEV-weekends,STDEV-alldays")
    for value1 in Unit_values:
        for value2 in State_vals:
            ## Modify each of the queries
            updated_querymodifications_1 = query_updatevalue(query_modifications,['Unit_values', 'State_values'],[value1, value2]) #present values in the order to match the keys
            updated_querymodifications_2 = query_updatevalue(query_modifications,['Unit_values', 'State_values'],[value1, value2]) #present values in the order to match the keys

            #Write out the values for the evaluation being tested in the current DB query
            sys.stdout.write(str(value1))
            sys.stdout.write(",") #separator
            sys.stdout.write(str(value2))
            sys.stdout.write(",") #separator

            #sys.stdout.write("******") #Debug test separator

            #put the parts together and query the DB:
            #process each query:
            #query 1
            cursor.execute(query_1, updated_querymodifications_1[0]) #Process query with variable modifications
            queryreturn_1 = cursor.fetchone() #Fetch only one row with defined query for first state
            #query 2
            cursor.execute(query_2, updated_querymodifications_2[0]) #Process query with variable modifications
            queryreturn_2 = cursor.fetchone() #Fetch only one row with defined query for first state

            #separate parts for energy totaling
            if (value2 == "Off" and value1 == "State%PerDay"):
                energyaccumulator[0][0] =  (queryreturn_1[5]) #weekdays
                energyaccumulator[0][1] =  (queryreturn_1[8]) #weekends
                energyaccumulator[0][2] =  (queryreturn_1[9]) #all days

            elif (value2 == "Sleep" and value1 == "State%PerDay"):
                energyaccumulator[1][0] =  (queryreturn_1[5]) #weekdays
                energyaccumulator[1][1] =  (queryreturn_1[8]) #weekends
                energyaccumulator[1][2] =  (queryreturn_1[9]) #all days

            elif (value2 == "On" and value1 == "State%PerDay"):
                energyaccumulator[2][0] =  (queryreturn_1[5]) #weekdays
                energyaccumulator[2][1] =  (queryreturn_1[8]) #weekends
                energyaccumulator[2][2] =  (queryreturn_1[9]) #all days

            #write out the return values - Query 1
            sys.stdout.write(str(queryreturn_1[5]))
            sys.stdout.write(",") #separator
            sys.stdout.write(str(queryreturn_1[8]))
            sys.stdout.write(",") #separator
            sys.stdout.write(str(queryreturn_1[9]))
            #sys.stdout.write(",") #separator


            sys.stdout.write(";") #Debug test separator

            #write out the return values - Query 2
            #sys.stdout.write(str(queryreturn_2[idlepercent]))
            #sys.stdout.write(",") #separator
            sys.stdout.write(str(queryreturn_2[5]))
            sys.stdout.write(",") #separator
            sys.stdout.write(str(queryreturn_2[8]))
            sys.stdout.write(",") #separator
            sys.stdout.write(str(queryreturn_2[9]))

            print() #newline
        print() #newline
        print() #newline

    #print out a CSV formatted return into the console for energy usage
    print("Energy Baseline Info:")
    print()
    print ("State,Power(W),Scoped_Period, EnergyBaselineperYear(KWh)")
    for index, items in enumerate(CompLoadParamsOff):
        OffenergyuseAllWeekdays = ((energyaccumulator[0][0] * 24)*(items/1000)*261) #number of weekdays to apply the average across
        OffenergyuseAllWeekendDays = ((energyaccumulator[0][1] * 24)*(items/1000)*104) #number of weekend days to apply the average across
        OffenergyuseAlldays = ((energyaccumulator[0][2] * 24)*(items/1000)*365) # total days in the year "
        sys.stdout.write("Off") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",Weekdays,") #separator
        print (str(OffenergyuseAllWeekdays))
        sys.stdout.write("Off") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",Weekend Days,") #separator
        print (str(OffenergyuseAllWeekendDays))
        sys.stdout.write("Off") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",All Days,") #separator
        print (str(OffenergyuseAlldays))


    for index, items in enumerate(CompLoadParamsStby):
        StbyenergyuseAllWeekdays = ((energyaccumulator[1][0] * 24)*(items/1000)*261) #number of weekdays to apply the average across
        StbyenergyuseAllWeekendDays = ((energyaccumulator[1][1] * 24)*(items/1000)*104) #number of weekend days to apply the average across
        StbyenergyuseAlldays = ((energyaccumulator[1][2] * 24)*(items/1000) *365) # total days in the year "
        sys.stdout.write("Standby") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",Weekdays,") #separator
        print (str(StbyenergyuseAllWeekdays))
        sys.stdout.write("Standby") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",Weekend Days,") #separator
        print (str(StbyenergyuseAllWeekendDays))
        sys.stdout.write("Standby") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",All Days,") #separator
        print (str(StbyenergyuseAlldays))


    for index, items in enumerate(CompLoadParamsOn):
        OnenergyuseAllWeekdays = ((energyaccumulator[2][0] * 24)*(items/1000)*261) #number of weekdays to apply the average across
        OnenergyuseAllWeekendDays = ((energyaccumulator[2][1] * 24)*(items/1000)*104) #number of weekend days to apply the average across
        OnenergyuseAlldays = ((energyaccumulator[2][2] * 24)*(items/1000) *365) # total days in the year "
        sys.stdout.write("On") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",Weekdays,") #separator
        print (str(OnenergyuseAllWeekdays))
        sys.stdout.write("On") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",Weekend Days,") #separator
        print (str(OnenergyuseAllWeekendDays))
        sys.stdout.write("On") #separator
        sys.stdout.write(",") #separator
        sys.stdout.write(str(items)) #separator
        sys.stdout.write(",All Days,") #separator
        print (str(OnenergyuseAlldays))

    print()
    print()
    print("Operation Complete")
    cursor.close() #end cursor
    db.close()  #close DB connection